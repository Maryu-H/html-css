DMM WEBCAMP
COMMIT 基礎知識学習フェーズ ver5.0 


HTML･CSSを学ぼう

5章【ヘッダーとフッターを作ろう】
目次

学習の目標
事前準備
header要素とfooter要素を記述する
ヘッダーの構成を理解しよう
h要素でロゴを設定する
章タイトルをリンクにする
nav領域を設定する
ul要素について
li要素でリストを作成する
list-styleプロパティ
text-align（テキスト アライン）プロパティ
displayプロパティ
中央揃えの方法
フッターの構成を理解しよう
フッターの領域を設定する
完成版のソースコード
まとめ
確認問題
演習問題
学習の目標
本章では、ヘッダーやフッターの制作に必要なHTMLとCSSを学んでいきます。
前章までに学んだ知識を、より具体的なコーディングに活用していきます。
理解が難しい点もあるかもしれませんが、デベロッパーツール・デバッグツールを活用して学習を進めていきましょう。


事前準備
本章では、前章で作ったCARAVANサイトの外枠内を、さらに作り込んでいきます。
ヘッダー領域を設定するときに、divタグのheaderクラスを使用しました。
しかし、実際は、ヘッダー領域を表すheaderタグが存在します。headerタグを使うと、HTMLの構造がわかりやすくなります。
今後、ヘッダーを設定するときは、headerタグを使うようにしましょう。
同様にフッターにも、フッター領域を表すfooterタグがあります。divタグを使うより、HTMLの構造が明確になるので、正しく使うようにしましょう。

それでは、headerタグ・footerタグを使いながらCARAVANサイトのヘッダーとフッターを変更していきます。
まず、外枠に設定した背景色を削除し、divタグとclass属性で設定したヘッダーやフッターを、headerタグとfooterタグに修正します。
下記内容を行いましょう。

index.htmlファイルの修正
header, header-top, header-bottom, footerクラスのdivタグの削除
style.cssファイルの修正
background-colorをすべて削除する
header, header-top, header-bottom, footerクラスに対するCSS指定の削除
上記変更を加えたソースコードがこちらです。
ソースコードの記述量が多い場合に下記の完成コードのように非表示にする場合があります。
確認する際は▶︎をクリックして展開してください。

index.html
style.css
header要素とfooter要素を記述する
上記の修正ができたら、HTMLファイルとCSSファイルを以下のように編集しましょう。header要素とfooter要素を書き換えます。
これから大きく変更を加えていきますので、説明とコードは詳細までチェックしてください。

index.html
style.css
ここまで完了しましたら、本章の内容に入っていきます。
本章では下記画像の赤枠の部分を作成していきます。




ヘッダーの構成を理解しよう
これから詳細まで詰めて、CARAVANサイトを制作していきます。
まずは、ヘッダー内にロゴとメニューを設置して、完成イメージに近づけていきましょう。
今回使用するタグは、h1、nav、ul、liの各タグです。



h要素でロゴを設定する
h要素の「h」はheadingの略で、見出しを表します。
h要素には、h1からh6までの6種類があります。h1が、最も重要なタグです。
本でたとえると、h1が章タイトル、h2が節タイトルに該当します。



見出しを書くときは、h1、h2、h3というように、h1から順に用いるのが正しい文書構造です。
テキストの文字サイズやスタイルなどは、CSSで設定します。
今回は、h1要素を使って章タイトルを作成していきましょう。

h1要素で章タイトルを設定する
下記のようにh1要素を記述します。

index.html
次に、CSSを記述します。
header要素内のheadingクラスに対してのみ、CSSを適用させる記述です。
headingクラスのフォントサイズを、32pxに設定します。

style.css
記述を終えたら、ブラウザで確認しましょう。



要素内にある任意の要素に対してCSSを適用したいときは、これまでの記述とは異なるので注意してください。
たとえば、h1要素が対象の場合と、headerクラス内にあるh1要素が対象の場合では、それぞれ以下のように記述します。書き方の違いを確認しましょう。

sample.css
/* ページ内すべてのh1要素に適応される */
h1 {
  font-size: 32px;
}
sample.css
/* headerクラス内にあるh1要素に対してのみ適応される */
.header h1 {
  font-size: 32px;
}
全体に適用される共通デザインと、部分に適用されるデザインとでは、CSSの記述方法が異なります。注意が必要です。
特定の場所にある要素に適用するときは、以下のような書き方があります。

sample.css
h1, h2 {
  /* h1要素とh2要素の両方に適用される */
}
header>h1 {
  /* header要素の直下にあるh1要素に適用される */
}
h1#header {
  /* id名「header」のh1要素に適用される */
}
CSSの記述方法には、これ以外にもさまざまな方法があります。今までに出てきた記述は最も基本的な書き方ですので、ぜひ覚えておきましょう。

章タイトルをリンクにする
h1要素内に、リンク（a要素）を挿入します。
a要素には、「CARAVAN」の文字をクリックしたときにindex.htmlにジャンプするように、href属性とURLを記述します。

a要素のhref属性はlink要素のhrefと同様で相対パスで指定します。

index.html
編集を終えたら、ブラウザで確認しましょう。



CARAVANという文字はリンクになっているので画面遷移します。
href属性の値にindex.htmlと記述したので同じ画面に遷移します。
例えば、href属性の値に https://infratop.jp とURLを記述した場合にも画面遷移を行います。
また、リンクにカーソルを合わせるとブラウザの左下にそのリンク先のURLが表示されます。
リンク先が正しいか確認できますので活用しましょう。



nav領域を設定する
nav要素は、ナビゲーションメニューを設定するときに用います。header要素やfooter要素などと同様に、領域を作成するための要素です。
ナビゲーションメニューは「Webサイトの目次」のことで、クリックすると各ページへ移動します。
ナビゲーションメニューを設置しておくことで、欲しい情報にすばやくたどり着くことができます。
以下の画像では、「特徴　講座一覧……」の部分がナビゲーションメニューです。
デベロッパーツールで確認するとnav要素が利用されていることがわかります。



ナビゲーションメニューのイメージを把握できたでしょうか。

今回は、nav要素にCSSの設定は行いません。しかし、ここがナビゲーションであることを明確にするため、navタグ内にulタグを追記します。

index.html
ul要素について
ul要素はUnordered Listの略で、順序のないリスト（箇条書きリスト） を表示する要素です。リストの各項目はli要素で記述します。
リストを表示するタグには、olタグもあります。olタグはOrdered Listの略で、番号付きのリスト を表示する要素です。ol要素も、リストの各項目をli要素で記述します。
リストを作成するときはul要素とli要素、もしくはol要素とli要素をセットで利用します。

li要素でリストを作成する
li要素はList Itemの略で、リストの内容を指定する要素です。
リスト行頭の表示スタイルは、ul要素またはol要素のどちらで記述されているかによって決まります。
ul要素の場合、・ がリストの先頭に付きます。
ol要素の場合、1から始まる番号が付きます。

実際に記述します。

index.html
1つ目のliタグ「Home」のみ、aタグでリンクを記述します。Home以外は、今回はリンク先Webページを作成しないので、リンクを記述していません。
CSSを適用していない状態でulタグやliタグを記述すると、おかしな表示になってしまいます。
CARAVANのヘッダーに近づけるため、ulタグやliタグにCSSを適用します。

また、headerにも、スタイルを追加します。

style.css
記述を終えたら、ブラウザで確認しましょう。



header、.nav-list、.nav-list-itemに、それぞれCSSを追加しました。
追加したCSSプロパティのうち、今回は、list-style、display、text-alignについて解説します。

list-styleプロパティ
list-styleは、箇条書きリスト行頭のスタイルを制御できるプロパティです。ulタグのリストでは、通常、黒丸（・）が行頭に付きますが、list-styleを使うと制御できます。
今回は、リスト先頭にマークを入れたくないので、list-style: none; を指定します。

list-styleにはさまざまな値があります。
ただし、値はnoneにするのが一般的です。
下記はlist-styleプロパティの値の詳細です。

値	意味
disc	黒丸（初期値）
circle	白丸
square	黒四角
lower-roman	小文字のローマ数字
upper-roman	大文字のローマ数字
lower-greek	小文字のギリシャ文字
text-align（テキスト アライン）プロパティ
text-alignは、テキストや画像の行揃えを設定するプロパティです。値としては、left（左揃え）、center（中央揃え）、right（右揃え）がよく使われます。
left、center、rightの違いは、下図のとおりです。
text-alignは、要素自体を右揃えや左揃えにするわけではありません。注意しましょう。
今回は、テキストを中央揃えにしたいので、text-align: center; を使用します。



displayプロパティ
displayは、要素の表示形式を設定するプロパティです。
要素は、「縦に積み上がって表示」「テキスト内に表示」のように、それぞれ表示形式が決まっています。
たとえば、「テキスト内に表示される性質の要素を、縦に積み重ねて表示したい」というとき、displayプロパティで表示形式を変更することができます。
表示形式は、ブロックレベル要素、インライン要素、インラインブロック要素に大別できます。
要素のデフォルト設定がブロックレベル要素であってもインライン要素に変更することもできます。

ブロックレベル要素
ブロックレベル要素は、要素を1つのかたまり（ブロック）として扱う要素です。Webブラウザ上では前後に改行が入り、縦に積み上がって表示されます。
代表的なブロックレベル要素には、div要素、header要素、nav要素、h1要素～h6要素、p要素、ul要素、ol要素などがあります。多くの要素がブロックレベル要素に該当します。



インライン要素
インライン要素は、ブロックレベル要素内やテキスト内に挿入される要素です。テキストと同じレベルで扱われ、前後に改行は入りません。
代表的なインライン要素には、strong要素、img要素、span要素、a要素などがあります。
インライン要素に分類される要素は、ブロックレベル要素よりも圧倒的に少ないので、代表的なインライン要素を覚えて、それ以外はブロックレベル要素と覚えるとよいかもしれません。



※ ブロックレベル要素・インライン要素を使うときの注意点
Webページを作るときは、さまざまな要素を並べたり、要素内に別の要素を挿入して制作します。ブロックレベル要素とインライン要素を同時に使うときは、特に注意が必要です。

ブロックレベル要素内には、ブロックレベル要素やインライン要素を配置できる
インライン要素内には、インライン要素しか配置できない（ブロックレベル要素は配置できない）
sample.html
<!-- ブロック要素 > インライン要素 正しい例 -->
<div>
  <a href="index.html">正しい例</a>
</div>
sample.html
<!-- インライン要素 > ブロック要素 間違った例 -->
<a href="index.html">
  <p>間違った例</p>
</a>
インラインブロック要素
インラインブロック要素は、インライン要素とブロックレベル要素の利点を持っている要素です。
並び方はインライン要素と同様に横に並び、中身はブロックレベル要素と同様に幅（width）や高さ（height）、余白（paddingやmargin）の指定ができます。
ただし、最初からインラインブロック要素を設定できる要素はありません。インラインブロック要素にするには、displayの値として設定する必要があります。

以下、特徴をまとめています。



※ インラインブロック要素で横に並べるときの注意点
インラインブロック要素を指定すると、Flexboxを使わずに要素を横に並べられます。ただし、要素間に不要な隙間ができてしまいます。
これは、インラインブロック要素がテキストの一部として認識されてしまうことが原因です。この隙間をなくすには、親要素のfont-sizeを「0」に設定します。

中央揃えの方法
ここまで、ブロックレベル要素とインライン要素を学んできました。中央揃えは、要素によって方法が異なります。中央揃えの方法を、ここで整理しておきます。

左右の中央揃え
ブロックレベル要素で中央揃えにするには、Flexboxで指定します（上下余白を0px、左右余白を自動的に等間隔）。インライン要素で中央揃えするには、text-align: center; を指定します。
Flexboxは、前章の復習です。
text-align: centerは、本章のtext-alignの復習です。

１. テキストの中央揃え
中央揃えにしたいテキストの親要素にあたるブロック要素に、text-align: center;を設定します。

２. 画像の中央揃え
画像のimgタグはインライン要素なので、テキストと同じ扱いになります。親要素に、text-align: center; を設定します。

３. ブロックレベル要素の中央揃え
中央揃えにしたい要素の親要素に、Flexboxの設定を行います。

上下の中央揃え
左右の中央揃えは、Flexboxやtext-alignプロパティで設定します。しかし、上下の中央揃えは、Flexboxやtext-alignプロパティでは指定できません。少し特殊な方法で制御します。
以下は、改行のないテキストの中央揃えの方法です。上下の中央揃えは、line-heightで数値を指定しましょう。

「行の高さ」＝「親要素の高さ」にして中央揃え
中央揃えしたいテキストに line-height: ◯◯px; のように行の高さを指定します。ここで指定した値と、親要素である「上下中央に配置したいボックスの高さ」を同じ値にします。
文字の位置は、「行の高さの中央」になるので、上下中央揃えとなり、font-sizeから余った分が上下余白になります。




フッターの構成を理解しよう
フッターの領域を設定する
フッター領域には、p要素でコピーライトを記述します。
コピーライトマーク（©）はコピーしましょう。

index.html
style.css
また、文字色に統一性がなくなったうえに、リンクテキストの下線もデザイン通りではないので、まとめて削除しましょう。
文字色は、すべての要素の文字色を変更します。
リンクに下線が表示されるのは、aタグのtext decoration、すなわち文字装飾機能によるものなので、その指定を「なし」にします。

style.css
ここまでできたら、ヘッダーとフッターの構成は完成です。
ブラウザで確認してみましょう。




完成版のソースコード
index.html
style.css
/* ブラウザがそれぞれ持っているCSSをリセットするための記述 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  color: #6c6b6b;
}

a {
  text-decoration: none;
}

header {
  width: 90%; /* 横幅90% */
  padding: 15px 0;
  margin: 0 auto;
  text-align: center;
}

header .heading { /* headerタグ内のheadingクラスにのみ反映される */
  font-size: 32px;
}

.nav-list {
  text-align: center;
  padding: 10px 0;
  margin: 0 auto;
}

.nav-list-item {
  list-style: none;
  display: inline-block;
  margin: 0 20px;
}

.main-visual {
  width: 100%; /* 横幅いっぱい */
  height: 300px; /* 高さ300px */
}

.main-visual-content {
  width: 350px; /* 横幅350px */
  height: 300px; /* 親の高さに揃える */
}

.main {
  width: 840px; /* 横幅840px */
  display: flex; /* Flexboxの利用 */
  justify-content: center; /* 要素の横並び・中央寄せ */
  margin: 0 auto; /* 中央寄せ（左右に余白がないとできない） */
}

.blog {
  width: 600px; /* 横幅600px */
  height: 1400px; /* 高さ1400px */
}

.sidebar {
  width: 240px; /* 横幅240px */
  height: 1400px; /* 高さ1400px */
}

footer {
  width: 100%;
  height: 120px;
  text-align: center;
  line-height: 120px;
  background-color: #848282;
}

.footer-text {
  color: #fff;
}

まとめ
ヘッダーは、headerタグで設定する
navタグは、ナビゲーションメニューのレイアウトで使用する
ulタグとolタグは、liタグで各リスト項目を指定する
ulタグのリスト項目は行頭が「・」、olタグのリスト項目は番号になる
テキストの行揃えは、text-alignプロパティで設定する
HTML要素にはブロックレベル要素とインライン要素、インラインブロック要素があり、特徴とルールが異なる
フッターは、footerタグで設定する

確認問題
問１
3番目に重要な見出しを表すタグは、何タグですか。

解答はこちら

問２
ブロック要素の特徴として、正しいものは次のうちどれでしょう。

a. 横並びになる
b. 上下に余白ができない
c. 幅と高さが指定できる

解答はこちら

問３
以下の要件に従って、Webページを作ってください。

【要件】
１. headerタグ、h1タグ、navタグ、olタグ、liタグを用いる
　　headerタグの中にh1タグとnavタグがあり、navタグの中にolタグ、
　　olタグの中にliタグが4つある構成にする
２. h1タグの中身は、EXAMPLE とする
３. liタグの中身は、それぞれMENU1、MENU2、MENU3、MENU4 とする
４. class名は、それぞれ"headline"、"nav"、"list"、"list-item"とする
５. headerのwidth（横幅）は、10％にする
６. headlineのfont-size（文字の大きさ）は、22pxにする
７. nav内の文字を中央寄せ（text-align）にする
８. "list"クラスにはcssでpadding-left: 40px;を適用させる
※リセットCSSの適用でブラウザがデフォルトで持っているcssを打ち消したことで、olの番号が表示される領域が消えてしまったことを補うため

【完成図】



解答はこちら
解答
HTML/CSSはこちら

index.html
<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="style.css" />
    <title>EXAMPLE</title>
  </head>

  <body>
  <header>
    <h1 class="headline">EXAMPLE</h1>
    <nav class="nav">
      <ol class="list">
        <li class="list-item">MENU1</li>
        <li class="list-item">MENU2</li>
        <li class="list-item">MENU3</li>
        <li class="list-item">MENU4</li>
      </ol>
    </nav>
  </header>
  </body>
</html>
style.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
header {
  width: 10%;
}
.headline {
  font-size: 22px;
}
nav {
  text-align: center;
}
.list{
  padding-left: 40px;
}
解説
まずは1の要件を元にHTMLを記述していきます。

index.html
<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>EXAMPLE</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <header>
      <h1></h1>
      <nav>
        <ol>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
        </ol>
      </nav>
    </header>
  </body>
</html>
次に2、3に沿ってHTMLそれぞれの要素に文字を追加します。

index.html
<header>
  <h1>EXAMPLE</h1>  <nav>
    <ol>
      <li>MENU1</li>
      <li>MENU2</li>
      <li>MENU3</li>
      <li>MENU4</li>    </ol>
  </nav>
</header>
続いて4でclass属性と属性値を割り振ります。

index.html
<header>
  <h1 class="headline">EXAMPLE</h1>
  <nav class="nav">
    <ol class="list">
      <li class="list-item">MENU1</li>
      <li class="list-item">MENU2</li>
      <li class="list-item">MENU3</li>
      <li class="list-item">MENU4</li>    </ol>
  </nav>
</header>
ここまででHTMLの記述は終了です。
続いて5の要件からCSSの記述に移ります。

style.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
header {
  width: 10%;
}
最後に6、7、8の要件をCSSに記述し、完成図通りになればクリアです。

style.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
header {
  width: 10%;
}
.headline {
  font-size: 22px;
}
nav {
  text-align: center;
}
.list{
  padding-left: 40px;
}


演習問題
HTMLファイルとCSSファイルを作成し、chapter5_exerciseを参考にWebページを作ってみましょう。
ヒント：Flexboxでflex-wrapというプロパティ、wrapという値を利用します。

【chapter5_exercise】

【解答はこちら】

お疲れ様でした
0% 
5章【ヘッダーとフッターを作ろう】はここで終了です。

この章の現在の総合理解度は0%です。

わからなかった所は質問や復習をしてみましょう。

学習の進捗を友達にシェア

 
前の章へ
一覧
次の章へ
利用規約  プライバシーポリシー
Copyright © Infratop Inc. All Rights Reserved.